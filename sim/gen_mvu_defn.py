
 # 
 # This file generates a parameter file to be used by the test benches.
 #

import numpy as np
import sys
import argparse

def gen_mvau_defn(pad, stride, kdim, iwl, ifmc, ofmc, ifmd, wwl, op_sgn, owl, simd, pe, mmv):
    mvau_defn = open("mvu_defn.sv", "wt")
    mvau_defn.write("`ifndef MVAU_DEFN_PKG // if the already-compiled flag is not set\n")
    mvau_defn.write("    `define MVAU_DEFN_PKG //set the flag\n")
    mvau_defn.write("package mvu_defn;\n")
    mvau_defn.write("    parameter int KDim = %d; // Kernel dimensions\n" % kdim)
    mvau_defn.write("    parameter int IFMCh = %d; // Input feature map channels\n" % ifmc)
    mvau_defn.write("    parameter int OFMCh = %d; // Output feature map channels or the number of filter banks\n" % ofmc)
    mvau_defn.write("    parameter int IFMDim = %d; // Input feature map dimensions\n" % ifmd)
    mvau_defn.write("    parameter int PAD = %d; // Padding around the input feature map\n" % pad)
    mvau_defn.write("    parameter int STRIDE = %d; // Number of pixels to move across when applying the filter\n" % stride)
    mvau_defn.write("    parameter int SIMD = %d; // Number of input columns computed in parallel\n" % simd)
    mvau_defn.write("    parameter int PE = %d; // Number of output rows computed in parallel\n" % pe)
    mvau_defn.write("    parameter int MMV = %d; // Number of output pixels computed in parallel\n" % mmv)
    mvau_defn.write("    parameter int TSrcI = %d; // DataType of the input activation (as used in the MAC)\n" % iwl)
    mvau_defn.write("    parameter int TW = %d; // Word length of individual weights\n" % wwl)
    mvau_defn.write("    parameter int TDstI = %d; // DataType of the output activation (as generated by the activation) \n" % owl)
    mvau_defn.write("    parameter int OP_SGN = %d; // Enumerated values showing signedness/unsignedness of input activation/weights\n" % op_sgn)
    mvau_defn.write("\n")

    mvau_defn.write("// defered parameters:\n")
    mvau_defn.write("    parameter int OFMDim = (IFMDim-KDim+2*PAD)/STRIDE+1; // Output feature map dimensions\n")
    mvau_defn.write("    parameter int MatrixW = KDim*KDim*IFMCh; // Width of the input matrix\n")
    mvau_defn.write("    parameter int MatrixH = OFMCh; // Heigth of the input matrix\n")
    mvau_defn.write("    parameter int ACT_MatrixW = OFMDim*OFMDim; // input activation matrix height\n")
    mvau_defn.write("    parameter int ACT_MatrixH = (KDim*KDim*IFMCh); // input activation matrix weight\n")

    mvau_defn.write("    parameter int TI = SIMD*TSrcI; // SIMD times the word length of input stream\n")
    mvau_defn.write("    parameter int TO = PE*TDstI; // PE times the word length of output stream   \n")
    mvau_defn.write("    parameter int WMEM_DEPTH = (KDim*KDim*IFMCh*OFMCh)/(SIMD*PE); // Depth of each weight memory\n")
    mvau_defn.write("\n")

    mvau_defn.write("// reserved parameters:\n")
    mvau_defn.write("    parameter int DSP_TRUE=0; // Use DSP blocks or LUTs for MAC\n")
    mvau_defn.write("    parameter int INST_WMEM=1; // Instantiate weight memory; if needed\n")
    mvau_defn.write("    parameter int USE_ACT=0;     // Use activation after matrix-vector activation\n")
    mvau_defn.write("endpackage\n")
    mvau_defn.write("    \n")
    mvau_defn.write("`endif\n")

    mvau_defn.close()

def parser():
    parser = argparse.ArgumentParser(description='Python data script for generating MVAU Paramter file')
    parser.add_argument('--pad', default=0, type=int,
            help="Padding around the input feature map")
    parser.add_argument('--stride', default=1, type=int,
            help="Numberof pixels to move across when applying the filter")
    parser.add_argument('-k','--kdim',default=2,type=int,
			help="Filter dimension")
    parser.add_argument('-i','--inp_wl',default=8,type=int,
			help="Input word length")
    parser.add_argument('--ifm_ch', default=4,type=int,
			help="Input feature map channels")
    parser.add_argument('--ofm_ch', default=4, type=int,
			help="Output feature map channels")
    parser.add_argument('--ifm_dim', default=4, type=int,
			help="Input feature map dimensions")
    parser.add_argument('-w','--wgt_wl',default=8,type=int,
                        help="Weight word length")
    parser.add_argument('--op_sgn',default=0,type=int,
                        help="Enumerated values for signed/unsigned input activation/weights")
    parser.add_argument('-o','--out_wl', default=16, type=int,
			help="Output word length")
    parser.add_argument('-s','--simd',default=2,type=int,
			help="SIMD")
    parser.add_argument('-p', '--pe', default=2,type=int,
			help="PE")
    parser.add_argument('-m', '--mmv', default=1,type=int,
			help="MMV")
    return parser

if __name__ == "__main__":

    ## Reading the argument list passed to this script
    args = parser().parse_args()

    ## Generating the definition file for RTL
    gen_mvau_defn(args.pad, args.stride, args.kdim, args.inp_wl, args.ifm_ch, args.ofm_ch, args.ifm_dim,
                  args.wgt_wl, args.op_sgn, args.out_wl, args.simd, args.pe, args.mmv)
                            
    sys.exit(0)
